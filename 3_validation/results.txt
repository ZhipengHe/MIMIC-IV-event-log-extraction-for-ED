# Detect missing values in subject_id 
> activity_log %>% 
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "subject_id")

# Selected level of aggregation:column
# *** OUTPUT ***
# Absolute number of missing values in columnsubject_id:0
# Relative number of missing values in columnsubject_id(expressed as percentage):0


# Detect missing values in gender 
> activity_log %>% 
+   bupaR::filter(activity=="Enter the ED") %>%
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "gender")

# Selected level of aggregation:column
# *** OUTPUT ***
# Absolute number of missing values in columngender:0
# Relative number of missing values in columngender(expressed as percentage):0



# Detect missing values in race 
> activity_log %>% 
+   bupaR::filter(activity=="Enter the ED") %>%
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "race")

# Selected level of aggregation:column
# *** OUTPUT ***
# Absolute number of missing values in columnrace:0
# Relative number of missing values in columnrace(expressed as percentage):0


# Detect missing values in arrival_transport 
> activity_log %>% 
+   bupaR::filter(activity=="Enter the ED") %>%
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "arrival_transport")

# Selected level of aggregation:column
# *** OUTPUT ***
# Absolute number of missing values in columnarrival_transport:0
# Relative number of missing values in columnarrival_transport(expressed as percentage):0

# Detect missing values in disposition 
> activity_log %>% 
+   bupaR::filter(activity=="Discharge from the ED") %>%
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "disposition")

#Selected level of aggregation:column
#*** OUTPUT ***
#Absolute number of missing values in columndisposition:0
#Relative number of missing values in columndisposition(expressed as percentage):0


# Detect missing values in acuity 
> activity_log %>% 
+   bupaR::filter(activity=="Triage in the ED") %>%
+   daqapo::detect_missing_values(level_of_aggregation = "column", 
+                                 column = "acuity")

# Selected level of aggregation:column
# *** OUTPUT ***
# Absolute number of missing values in columnacuity:6976
# Relative number of missing values in columnacuity(expressed as percentage):1.64130363176073


# detect incomplete cases
> activity_log %>%
+   daqapo::detect_incomplete_cases(activities = c("Enter the ED", "Triage in the ED", "Discharge from the ED"))

# *** OUTPUT ***
# It was checked whether the activities Discharge from the ED, Enter the ED, Triage in the ED are present for cases.
# These activities are present for 425028 (100%) of the cases and are not present for 0 (0%) of the cases.
# Note: this function only checks the presence of activities for a particular case, not the completeness of these entries in the activity log or the order of activities.


# Detect cases with `disposition == "ADMITTED"` which `hadm_id` is NA
> activity_log %>% 
+   bupaR::filter((activity =="Discharge from the ED") & (is.na(seq_num) | seq_num == 1) ) %>%
+   daqapo::detect_attribute_dependencies(antecedent = (disposition == "ADMITTED"),
+                                         consequent = is.na(hadm_id))

# *** OUTPUT ***
# The following statement was checked: if condition(s) ~(disposition == "ADMITTED") hold(s), then ~is.na(hadm_id) should also hold.
# This statement holds for 384 (0.24%) of the rows in the activity log for which the first condition(s) hold and does not hold for 157626 (99.76%) of these rows.


# Detect time anomaly
> activity_log %>% 
+   bupaR::filter((activity == "Enter the ED")) %>%
+   bupaR::mutate(enter_time = complete) -> activity_enter

> activity_log %>% 
+   bupaR::filter(((activity == "Discharge from the ED") & (is.na(seq_num) | seq_num == 1))) %>%
+   bupaR::mutate(discharge_time = complete) -> activity_discharge

> base::merge(x = activity_enter, y = activity_discharge, all.x = TRUE, by = "stay_id") %>%
+   bupaR::mutate(complete = discharge_time) %>%
+   bupaR::mutate(start = enter_time) %>%
+   daqapo::detect_time_anomalies()

# Selected anomaly type: both
# *** OUTPUT ***
# For 0 rows in the activity log (0%), an anomaly is detected.


# Detect repeated activities for activity `Medicine reconciliation`
> activity_log %>%
+   filter(activity == "Medicine reconciliation") %>%
+   daqapo::detect_multiregistration(level_of_aggregation = "case",
+                                    timestamp = "complete",
+                                    threshold_in_seconds = 61)

# Selected level of aggregation: case
# Selected timestamp parameter value: complete
# *** OUTPUT ***
# Multi-registration is detected for 270086 of the 304369 cases (88.74%) of the cases.


# Detect repeated activities for activity `Medicine dispensations`
> activity_log %>%
+   filter(activity == "Medicine dispensations") %>%
+   daqapo::detect_multiregistration(level_of_aggregation = "case",
+                                    timestamp = "complete",
+                                    threshold_in_seconds = 61)

# Selected level of aggregation: case
# Selected timestamp parameter value: complete
# *** OUTPUT ***
# Multi-registration is detected for 210732 of the 295998 cases (71.19%) of the cases.


# Detect repeated activities for activity `Vital sign check`
> activity_log %>%
+   filter(activity == "Vital sign check") %>%
+   daqapo::detect_multiregistration(level_of_aggregation = "case",
+                                    timestamp = "complete",
+                                    threshold_in_seconds = 61)

# Selected level of aggregation: case
# Selected timestamp parameter value: complete
# *** OUTPUT ***
# Multi-registration is detected for 8666 of the 398828 cases (2.17%) of the cases. 


# Detect repeated activities for activity `Discharge from the ED`
> activity_log %>%
+   filter(activity == "Discharge from the ED") %>%
+   daqapo::detect_multiregistration(level_of_aggregation = "case",
+                                    timestamp = "complete",
+                                    threshold_in_seconds = 1)

# Selected level of aggregation: case
# Selected timestamp parameter value: complete
# *** OUTPUT ***
# Multi-registration is detected for 256308 of the 425028 cases (60.3%) of the cases.




# Detect invalid value range of `acuity`
> activity_log %>%
+   bupaR::filter(activity == "Triage in the ED") %>%
+   daqapo::detect_value_range_violations(acuity = domain_numeric(from=1, to=5))

# *** OUTPUT ***
# The domain range for column acuity is checked.
# Values allowed between 1 and 5
# The values fall within the specified domain range for 418052 (98.36%) of the rows in the activity log and outside the domain range for 6976 (1.64%) of these rows.


# Detect invalid value range of `pain`
> activity_log %>%
+   bupaR::filter(activity == "Triage in the ED" | activity == "Vital sign check") %>%
+   bupaR::mutate(pain_num = as.numeric(pain)) %>%
+   daqapo::detect_value_range_violations(pain_num = domain_numeric(from=0, to=10))

# *** OUTPUT ***
# The domain range for column pain_num is checked.
# Values allowed between 0 and 10
# The values fall within the specified domain range for 1304018 (70.53%) of the rows in the activity log and outside the domain range for 544744 (29.47%) of these rows.